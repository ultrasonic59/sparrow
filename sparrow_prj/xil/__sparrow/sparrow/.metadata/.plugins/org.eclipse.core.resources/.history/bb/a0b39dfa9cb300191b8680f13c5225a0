/*
 * sepia_trk_ioctl.c
 *
 *  Created on: 07 7, 2015
 *      Author: vovag
 */

#include <linux/errno.h>
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/moduleparam.h>
#include <linux/slab.h>
#include <linux/input.h>
#include <linux/init.h>
#include <linux/serio.h>
#include <linux/delay.h>
#include <linux/clk.h>
#include <linux/miscdevice.h>
#include <linux/timer.h>
#include <linux/param.h>
#include <linux/poll.h>
#include <linux/proc_fs.h>
#include <linux/err.h>
#include <linux/io.h>
///++++++++++++++++++++++++++++++++++++++++
///#include <asm/io.h>
////#include <plat/gpio-cfg.h>

///#include <asm/system.h>
#include <asm/mach-types.h>

///#include <asm/irq.h>
///#include <mach/map.h>
////#include <plat/cpu.h>

#include <asm/io.h>
#////include <asm/irq.h>
#if 0
#include <mach/regs-gpio.h>
#include <mach/gpio-bank-a.h>
#include <mach/gpio-bank-b.h>
#include <mach/gpio-bank-k.h>
#include <mach/gpio-bank-n.h>
#endif

#include "sparrow_drv.h"
#include "../common_inc/sparrow_types.h"

///#include "../common_inc/sepia_trk_ioctl.h"
///#include "../common_inc/sepia_types.h"
///#include "../common_inc/sepia_utrk.h"
///#include "../common_inc/sepia_fpga_mm.h"
////#include "sepia_mod_type.h"

#define MAX_CNT_WAIT 		100000

///+++++++++++++++++++++++++++++++++++++++++

extern unsigned long sepia_trk_base;

////extern ed_par_trk_t ed_par_trk;
extern char vers_str[];
///+++++++++++++++++++++++++++++++++++++++
unsigned long vdelay(unsigned long idel)
{
unsigned long rez=1;
unsigned long ii;
for(ii=0;ii<idel;ii++)
{
rez*= rez+1;
}
return rez;
}
uint16_t rd_dat_trk(uint16_t addr)
{
uint16_t rez;
uint16_t *udef_addr=(uint16_t*)sepia_trk_base;
rez= *(udef_addr+addr);
return rez;
}

void wr_dat_trk(uint16_t addr,uint16_t dat)
{
volatile uint16_t *udef_addr=(uint16_t*)sepia_trk_base;
*(udef_addr+addr)=dat;
//// printk( KERN_ERR "\n=== [mod]wr_dat_trk[%x:%x]",addr,dat );

}
uint32_t rd_dat32_trk(uint16_t addr)
{
uint32_t rez;
uint16_t tmp;
uint16_t *udef_addr=(uint16_t*)sepia_trk_base;
tmp= *(udef_addr+addr);
rez= *(udef_addr+addr+2);
rez<<=16;
rez|=tmp;
return rez;
}
void rd_dat_blok_trk(uint16_t addr,uint16_t len,uint16_t *obuf)
{
uint16_t ii=0;
uint16_t t_dat;
uint16_t *udef_addr=(uint16_t*)sepia_trk_base;
///spi1_mutex_lock();
////len=64;
for(ii=0;ii<len;ii++)
	{
	t_dat=*(udef_addr+addr+ii);
	*(obuf+ii)=t_dat;
	}

///spi1_mutex_unlock();
}
void rd_osc_(uint16_t addr_osc,uint16_t len,uint8_t *obuf)
{
uint16_t ii;
uint16_t *t_buf=(uint16_t*)obuf;
uint16_t t_dat;
uint16_t *udef_addr=(uint16_t*)sepia_trk_base;
///spi1_mutex_lock();
for(ii=0;ii<(len/2);ii++)
	{
	t_dat=*(udef_addr+addr_osc+ii);
	*(t_buf+ii)=t_dat;
	}
///spi1_mutex_unlock();
}

void wr_dat32_trk(uint16_t addr,uint32_t dat)
{
uint16_t *udef_addr=(uint16_t*)sepia_trk_base;
///	 spi1_mutex_lock();
*(udef_addr+addr)=dat&0xffff;
*(udef_addr+addr+2)=(dat>>16)&0xffff;
///spi1_mutex_unlock();
}
void wr_dat_blok_trk(uint16_t addr,uint16_t len,uint16_t *ibuf)
{
uint16_t ii;
uint16_t *udef_addr=(uint16_t*)sepia_trk_base;
///spi1_mutex_lock();
for(ii=0;ii<len;ii++)
	{
	*(udef_addr+addr+ii) = *(ibuf+ii);
	}
///spi1_mutex_unlock();
}

///=========================================
void psk_izm(int idat)
{
wr_dat_trk(ADDR_UG_PSK,idat);
}

void clr_ext_irq(void)
{
////static int for_test=0;
///iowrite16(0x1, weasel_trk_base+ADDR_CLR_IRQ);
wr_dat_trk(ADDR_UG_CLR_IRQ,0x1);
///for_test++;
}

///==========================
void set_spd_spi_pow(unsigned char idat)
{
wr_dat_trk(ADDR_SPD_PRDAC,idat);
}
#define MAX_READY_CNT 2000

#define BIT_BUSY_SPI_POW (0x1<<8)
#define DELAY_SPI_POW 10000

int wait_ready_spi_pow(void)
{
int cnt_ready=0;
uint16_t t_dat;
for(cnt_ready=0;cnt_ready<MAX_READY_CNT;cnt_ready++)
	{
	t_dat=rd_dat_trk(ADDR_SPD_PRDAC);
	if((t_dat&BIT_BUSY_SPI_POW)==0)
		break;
	}
if(cnt_ready<MAX_READY_CNT)
	return 0;
else
	return -1;
}

int mod_put_spi_pow(u8 msk,u8 idat)
{
int rdy;
rdy=wait_ready_spi_pow();
if(rdy==0)
{
	wr_dat_trk(ADDR_POW_GEN+(msk&0x3),idat);
	printk( KERN_ERR "\n\r=== [mod]put_spi_pow[%x:%x[%d]]===",msk,idat,rdy );\
}
///	wait_ready_spi_pow();
////	vdelay(DELAY_SPI_POW);
return rdy;
}

int _mod_put_spi_pow(u16 idat)
{
///	int tmp=(i_dat<<8)+i_msk;
return mod_put_spi_pow((u8)(idat&0xff),(u8)(idat>>8)&0xff);
}

///===========================================
////static alt_dat_req_t alt_dat_req;

static alt_dat_req_t xil_dat_req;
////static alt_dat_req_t act_dat_req;
////static adc_spi_req_t adc_spi_dat_req;

void get_xil_data(alt_dat_req_t *tbuff)
{
int ii;
u16 tmp;
if(xil_dat_req.ndata>MAX_ALT_DATA_LEN)
	xil_dat_req.ndata=MAX_ALT_DATA_LEN;
for(ii=0;ii<xil_dat_req.ndata;ii++)
	{
///	tmp=ioread16((void*)(octopuz_trk_base+xil_dat_req.addr+ii) );
	tmp=rd_dat_trk(xil_dat_req.addr+ii);
	tbuff->data[ii]=tmp;
	}
tbuff->addr=xil_dat_req.addr;
tbuff->ndata=xil_dat_req.ndata;
///======================================================
printk( KERN_ERR "\n=== [mod]get_xil_data[%x:%x]",tbuff->addr,tbuff->data[0] );
///============================================================
}
void put_xil_data(alt_dat_req_t *tbuff)
{

int ii;
if(tbuff->ndata>MAX_ALT_DATA_LEN)
	tbuff->ndata=MAX_ALT_DATA_LEN;
for(ii=0;ii<tbuff->ndata;ii++)
	{
///	iowrite16(tbuff->data[ii], (void*)(octopuz_trk_base+xil_dat_req.addr+ii));
	wr_dat_trk(xil_dat_req.addr+ii ,tbuff->data[ii]);
	}
///======================================================
///printk( KERN_ERR "\n=== [mod]put_xil_data[%x:%x]",xil_dat_req.addr,tbuff->data[0] );
///============================================================

}
///===========================================
extern u8 tbl_kus_[];
void get_db_data(alt_dat_req_t *tbuff)
{
#if 0

u16 tmp;
tbuff->addr=act_dat_req.addr;
tmp=tbl_kus[tbuff->addr];
tbuff->data[0]=tmp;
////printk( KERN_ERR "\n=== [mod]get_db_data[%x:%x]",tbuff->addr,tmp );
tbuff->addr=act_dat_req.addr;
tbuff->ndata=1;
#endif
}
void put_db_data(alt_dat_req_t *tbuff)
{
#if 0

///iowrite16(tbuff->addr, spark_trk_base+OFFS_UGG_ADDR);
if(tbuff->addr>MAX_KUS_DB)
	tbuff->addr=MAX_KUS_DB;
tbl_kus[tbuff->addr]=tbuff->data[0];
////printk( KERN_ERR "\n=== [mod]put_db_data[%x:%x]",tbuff->addr,tbuff->data[0] );
#endif
}

///===============================================
#if 0
void mod_req_osc(u16 i_dat)
{
g_req_osc=1;
}
#endif
///===========================================

u8 on_off_izl=0;
void mod_set_on_izl(int on_off)
{
psk_izm(on_off&0x1 );
on_off_izl=on_off&0x1;
}

/*
void set_rele(int on_off)
{
if(on_off&0x1)
	put_rele(0x3);
else
	put_rele(0x0);
////printk( KERN_INFO "\n=== set_rele : %d\n" ,on_off);  //
}
*/
extern int ready_dat;
int get_rdy_data(void)
{
return ready_dat;
////return mod_summ_amp[g_wr_num_bank].samp[1].cnt;
}
void clr_rdy_data(void)
{
ready_dat=0;
////return mod_summ_amp[g_wr_num_bank].samp[1].cnt;
}
void mod_set_ug_conf(int idat)
{
wr_dat_trk(ADDR_UG_CONF,idat);
}
int mod_get_ug_conf(void)
{
int rez=0;
rez=rd_dat_trk(ADDR_UG_CONF);

return rez;
}
///=================================
void mod_set_num_summ(int idat)
{
if(idat>MAX_NUM_SUMM)
	idat=MAX_NUM_SUMM;
if(idat!=0)
	idat--;
wr_dat_trk(ADDR_MAX_SUMM,idat);
}
int mod_get_num_summ(void)
{
int rez=0;
rez=rd_dat_trk(ADDR_MAX_SUMM);
return rez;
}

///====================================
long sepia_trk_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
{
int retval = 0;
int tmp;
if( ( _IOC_TYPE( cmd ) != IOC_MAGIC ) )
	return -ENOTTY;
////printk( KERN_INFO "\n=== spark_trk_ioctl : %x\n" ,cmd);  //

switch( cmd )
	{
	case IOCTL_GET_NUM_IZM:
		tmp=get_num_izm();
		if( copy_to_user( (void*)arg, &tmp, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		break;
	case IOCTL_SET_NUM_IZM:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		mod_set_num_izm(tmp);
		break;
	case IOCTL_SET_SPD_SPIPOW:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		set_spd_spi_pow(tmp);
		break;
	case IOCTL_TRK_START:
////		if( copy_from_user(&curr_tact,  (void*)arg, _IOC_SIZE( cmd ) ) )
////			return -EFAULT;
////		psk_izl(curr_tact);
		break;
	case IOCTL_PUT_SPI_POW:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		retval=_mod_put_spi_pow((u16)tmp);
		break;
#if 0
	case IOCTL_PUT_UU_UPR:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		put_uu_upr(tmp);
		break;
#endif
	case IOCTL_SET_MAX_TACT:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		mod_set_max_tact(tmp);
		break;
	case IOCTL_GET_MAX_TACT:
		tmp=get_max_tact();
		if( copy_to_user( (void*)arg, &tmp, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		break;
	case IOCTL_SET_UG_CONF:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		mod_set_ug_conf(tmp);
		break;
	case IOCTL_GET_UG_CONF:
		tmp=mod_get_ug_conf();
		if( copy_to_user( (void*)arg, &tmp, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		break;
	case IOCTL_SET_NUM_SUMM:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		mod_set_num_summ(tmp);
		break;
	case IOCTL_GET_NUM_SUMM:
		tmp=mod_get_num_summ();
		if( copy_to_user( (void*)arg, &tmp, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		break;

	case IOCTL_SET_ON_IZL:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		mod_set_on_izl(tmp);
		break;
/*
	case IOCTL_SET_EX_LED:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		set_ex_led(tmp);
		break;
*/
	case IOCTL_GET_DATA_RDY:
		tmp=get_rdy_data();
		if( copy_to_user( (void*)arg, &tmp, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		break;
	case IOCTL_CLR_DATA_RDY:
		clr_rdy_data();
		break;
	case IOCTL_SET_MOD_LEN_REZ:
		{
		len_rez_dat_t t_len_rez_dat;
////	printk( KERN_ERR "\n=== mod_IOCTL_SET_XIL_REQ " );  //

		if( copy_from_user(&t_len_rez_dat, (void*)arg,  _IOC_SIZE( cmd ) ) )
			{
////			printk( KERN_INFO "error : %d\n" ,-EFAULT);  //
			return -EFAULT;
			}
		else
			{
			memcpy(&mod_len_rez_dat,&t_len_rez_dat,sizeof(len_rez_dat_t));
	////		printk( KERN_ERR "ok [%x:%x:%x]\n" ,xil_dat_req.addr
	////				,xil_dat_req.ndata,xil_dat_req.data[0] );  //
			}
		}
		break;

	case IOCTL_SET_XIL_REQ:
		{
		alt_dat_req_t t_xil_dat_req;
////	printk( KERN_ERR "\n=== mod_IOCTL_SET_XIL_REQ " );  //

		if( copy_from_user(&t_xil_dat_req, (void*)arg,  _IOC_SIZE( cmd ) ) )
			{
////			printk( KERN_INFO "error : %d\n" ,-EFAULT);  //
			return -EFAULT;
			}
		else
			{
			memcpy(&xil_dat_req,&t_xil_dat_req,sizeof(alt_dat_req_t));
	////		printk( KERN_ERR "ok [%x:%x:%x]\n" ,xil_dat_req.addr
	////				,xil_dat_req.ndata,xil_dat_req.data[0] );  //
			}
		}
		break;
	case IOCTL_GET_XIL_DATA:
		{
			alt_dat_req_t t_xil_dat_req;
////		printk( KERN_ERR "\nmod_IOCTL_GET_ALT_DATA ");  //

////		get_alt_data(&t_alt_dat_req);
		get_xil_data(&t_xil_dat_req);
		if( copy_to_user( (void*)arg, &t_xil_dat_req, _IOC_SIZE( cmd ) ) )
			{
////			printk( KERN_INFO "error : %d\n" ,-EFAULT);  //
			return -EFAULT;
			}
///		printk( KERN_ERR "ok [%x:%x:%x]\n" ,t_xil_dat_req.addr
///			,t_xil_dat_req.ndata ,t_xil_dat_req.data[0]);  //
		}
		break;
	case IOCTL_SET_XIL_DATA:
		{
		alt_dat_req_t t_xil_data;
		if( copy_from_user(&t_xil_data, (void*)arg,  _IOC_SIZE( cmd ) ) )
			{
			return -EFAULT;
			}
		else
			{
///			put_alt_data(&t_alt_data);
			put_xil_data(&t_xil_data);
///			printk( KERN_ERR "\n IOCTL_SET_XIL_DATA [%x:%x:%x]\n" ,t_xil_data.addr
///				,t_xil_data.ndata ,t_xil_data.data[0]);  //

			}
		}
		break;
#if 0
	case IOCTL_PUT_LED:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		mod_put_led(tmp);
		break;
#endif
#if 0
	case IOCTL_REQ_OSC:
		if( copy_from_user(&tmp,  (void*)arg, _IOC_SIZE( cmd ) ) )
			return -EFAULT;
		mod_req_osc(tmp);
		break;
#endif
	   case IOCTL_GET_VERS:
	     if( copy_to_user( (void*)arg, vers_str, _IOC_SIZE( cmd ) ) )
	   	  return -EFAULT;
	      break;
   default:
      return -ENOTTY;
}
return retval;
}
///+++++++++++++++++++++++++++++++++++
///+++++++++++++++++++++++++++++++++++
