/*
 * Copyright (c) 2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <fcntl.h>
#include <math.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
////#include <bits/mathcalls.h>
#include <pthread.h>
#include <syslog.h>

#include "../../common_inc/sparrow_ioctl.h"
#include "./inc/sparrow_cnf.h"
#include "./inc/my_types.h"
#include "./inc/sparrow_udp_cmds.h"
#include "../../common_inc/sparrow_fpga_mm.h"
////#include <stdio.h>
#include <linux/i2c-dev.h> // I2C bus definitions

extern void *udp_thread(void *arg);
extern pthread_t udp;

extern void set_changed_param(void);
extern u32 g_changed_param;
extern int init_adc(uint8_t idat);
extern uint16_t buffOscs[MAX_OSC_LEN];
extern int init_kus_adc(void);
extern int put_kus_adc(uint16_t i_val);
extern int init_fpga_mem(void);
extern int init_sin_table(void);
extern void set_gen_dat(uint16_t *ibuf,int len);
extern uint16_t t_sin_buff[SIN_BUFF_SIZE];


const char* VER_TXT="sparrow v1.0(G.V.A.)";
const char* MOD_PATH="/dev/sparrow";

int mod_fd;
int fd_i2c;
///const int mcp4725_address = 0x60;
const int urele_address = 0x30;



///========================================
int get_mod_vers(char *tbuf)
{
if( ioctl(mod_fd, IOCTL_GET_VERS,tbuf )<0)
	{
	sprintf(tbuf,"[-----]");
	return -1;
	}
fprintf(stderr,"\n %s",tbuf);
return 0;
}
void add_dat_oscs(uint16_t idat)
{
static int ii;
///for(ii=0;ii<MAX_OSC_LEN;ii++)
////	{
	buffOscs[ii]=idat;
	ii++;
if(ii>=MAX_OSC_LEN)
	ii=0;
////	}
}



uint16_t curr_ad_dat;
void get_ampl(void)
{
int tmp=0;
uint16_t tmp1;
ioctl(mod_fd, IOCTL_GET_AD_DATA,&tmp );
tmp1=(uint16_t)tmp;
tmp1^=((0x3)|(0x3<<2)|(0x3<<10));
curr_ad_dat=(uint16_t)tmp1;
add_dat_oscs(tmp1>>5);
}
extern uint16_t get_dac_reg_dat(uint16_t i_offs);
extern uint16_t get_dac_ram_dat(uint16_t i_offs);

///=========================================
int main()
{
////int ii;
uint8_t btmp=0;
uint16_t htmp=0;
uint16_t prev=0x45;

int	rez=0;
char tbuf[256];
///===========================================
printf("\nvers[%s]\n",VER_TXT);
printf("=========================\n"
		"sparrow \n"
		"(Built on %s %s)"
		"\n==========================",
		__DATE__, __TIME__);
#if 1
mod_fd = open(MOD_PATH, O_RDWR);
if(mod_fd <= 0)
	{
	printf("file open error : %s[%d]\n",MOD_PATH,mod_fd);
	syslog(LOG_INFO,"file open error : %s\n",MOD_PATH);
	return -1;
	}
printf("file open ok : [%s][%d]\n",MOD_PATH,mod_fd);
syslog(LOG_INFO,"file open ok : [%s][%d]\n",MOD_PATH,mod_fd);
rez=get_mod_vers(tbuf);
fprintf(stderr,"\n mod[%d][%s]",rez,tbuf);
set_spd_spi(4);
init_dac(0);
init_adc(0);

init_fpga_mem();
init_sin_table();

set_gen_dat(t_sin_buff,SIN_BUFF_SIZE);
///set_gen_dat(t_sin_buff,8000);


#endif
if ((fd_i2c = open("/dev/i2c-0", O_RDWR)) < 0) {
    fprintf(stderr,"Error: Couldn't open device! %d\n", fd_i2c);
////    exit (1);
  }
init_kus_adc();
#if 0
for(;;)
{
put_kus_adc(htmp&0xfff);
htmp++;
usleep(100);

}
#endif
#if 0
  // connect to mcp4725 as i2c slave
  if (ioctl(fd_i2c, I2C_SLAVE, mcp4725_address) < 0) {
    printf("Error: Couldn't find device on address[%x]!\n",mcp4725_address);
///    exit (1);
  }
#endif
#if 0
  if (ioctl(fd_i2c, I2C_SLAVE, urele_address) < 0) {
    printf("Error: Couldn't find device on address[%x]!\n",urele_address);
///    exit (1);
  }
  else
  {
	for(ii=0;ii<1000;ii++)
	{
		tbuf[0]=btmp&0x7;
	if (write(fd_i2c,tbuf,1) != 1)
		{
		    /* ERROR HANDLING: i2c transaction failed */
		    fprintf(stderr,"Failed to write to the i2c bus.\n");
///		    buffer = g_strerror(errno);
///		    printf(buffer);
///		    printf("\n\n");
		}
	btmp++;
	sleep(1);

	}
  }
#endif

pthread_create(&udp, NULL, udp_thread, NULL);
pthread_detach(udp);
///set_spd_spi(4);
///init_dac(0);
///init_adc(0);
usleep(10);
for(;;)
{
///		set_spd_spi(4);
if(g_changed_param)
	{
	set_changed_param();
	}
usleep(100);
////set_gen_dat(t_sin_buff,SIN_BUFF_SIZE);
htmp=get_dac_ram_dat(0);
if(prev!=htmp)
	{
	prev=htmp;
	fprintf(stderr,"<%x> ",htmp) ;
	}
get_ampl();
}

return 0;
}
